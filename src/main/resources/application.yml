# May require to edit hosts to add connection between docker
micronaut:
  application:
    name: mmo_server
  server:
    port: 8081
  router:
    static-resources:
      default:
        enabled: true
        mapping: /**
        paths: classpath:public
  executors:
#    TODO: Review these, this was increased because the kafka listeners did not have enough threads
    default:
      type: fixed
      nThreads: 50
    consumer:
      type: fixed
      nThreads: 50
    io:
      type: fixed
      nThreads: 75
  caches:
    actorAllegianceCacheLocal:
      expire-after-write: 60s # Local cache expiration
      maximum-size: 1000
      cache-type: caffeine
    itemCache:
      expire-after-write: 360s
      maximum-size: 1000
      cache-type: caffeine
    talentLocalCache:
      expire-after-write: 10s
      maximum-size: 1000
      cache-type: caffeine

jackson:
  serialization:
    writeDatesAsTimestamps: false
jpa:
  default:
    entity-scan:
      classpath: true
      packages:
        - 'com.org.mmo_server.repository.model'

kafka:
  streams:
    default:
      processing.guarantee: "exactly_once"
      auto.offset.reset: "earliest"
  bootstrap:
    servers: kafka-broker:9092
  security:
    protocol: PLAINTEXT
#  sasl:
#    mechanism: PLAIN
#    jaas:
#      config: org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka" password="password123";
  consumers:
    mmo-server:
      bootstrap:
        servers: kafka-broker:9092
      session:
        timeout:
          ms: 30000
      auto:
        offset:
          reset: earliest
      threadPool:
        coreSize: 10
        maxSize: 50
        queueSize: 500
      heartbeat:
        interval:
          ms: 10000

mongodb:
  #  Set username/password as env vars
  uri: mongodb://mongo_mmo_server:mongo_password@mongo-service:27017/mmo_server?authSource=admin
  options:
    maxConnectionIdleTime: 15000
    readConcern: majority
  #  For reactive MongoDB driver:
  cluster:
    maxWaitQueueSize: 5
  connectionPool:
    maxSize: 20

# MongoDB collections
mongo-database:
  database-name: "mmo-server"
  player-character-collection: "characters"
  items-collection: "items"
  item-instances-collection: "item-instances"
  dropped-items-collection: "dropped-items"
  inventory-collection: "inventory"
  equip-collection: "equip"
  player-motion: "playerMotion"
  mob-instance: "mobInstance"
  actor-stats: "actorStats"
  actor-status: "actorStatus"
  actor-skills: "actorSkills"
  actionbar: "actionbar"
  actorAllegiance: "actorAllegiance"
  actorThreat: "actorThreat"
  actorTalents: "actorTalents"

redis:
  uri: redis://redis
  io-thread-pool-size: 5
  computation-thread-pool-size: 4
  #  ssl: true
  timeout: 2s
  #  valueSerializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
  caches:
    default:
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-stats-cache:
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
      maximumSize: 1000
    actor-aggregated-statuses:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-aggregated-derived:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-motion-cache:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-status-cache:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-talent-cache:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-equip-cache:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-equip-cache-map:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    udp-session-cache:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-allegiance-cache:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
    actor-threat-cache:
      maximumSize: 1000
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
      expire-after-write: 360s
    combat-data-cache:
      maximumSize: 1000
      expire-after-write: 360s
      value-serializer: io.micronaut.jackson.serialize.JacksonObjectSerializer
feature-flags:
  enableUdp: true