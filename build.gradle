
plugins {
	id "com.github.johnrengelman.shadow" version "8.1.1"
	id "io.micronaut.application" version "4.4.2"
	id "com.avast.gradle.docker-compose" version '0.17.12'
	id "com.diffplug.spotless" version "6.25.0"
	id "io.micronaut.openapi" version "4.4.2"
	id "org.graalvm.buildtools.native" version '0.10.2'
}

version = "0.8.2"
group = "mmo_server"

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/master'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.17.0').aosp().reflowLongStrings()
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		// licenseHeader '/* (C)$YEAR */'
	}
}

tasks.compileJava.mustRunAfter(spotlessCheck)
dockerCompose.isRequiredBy(compileJava)

repositories {
	mavenCentral()
	gradlePluginPortal()
}

micronaut {
	runtime("netty")
	testRuntime("junit5")
	processing {
		incremental(true)
		annotations("mmo_server.*")
	}
}

dependencies {
	implementation("io.micronaut:micronaut-http-client:4.6.3")
	implementation("io.micronaut:micronaut-runtime:4.6.3")
	implementation("io.micronaut:micronaut-validation:3.1.0")
	runtimeOnly("ch.qos.logback:logback-classic:1.5.7")
	annotationProcessor('io.micronaut.data:micronaut-data-processor:4.9.0')
	implementation('javax.annotation:javax.annotation-api:1.3.2')
	// micronaut v4 dependency:
	runtimeOnly("org.yaml:snakeyaml:2.2")

//	// swagger
	implementation("io.swagger.core.v3:swagger-annotations:2.2.22")

	// Flowable
	implementation("io.micronaut.rxjava3:micronaut-rxjava3:3.5.0")
	implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client:3.5.0")

	// Lombok:
	compileOnly('org.projectlombok:lombok:1.18.34')
	annotationProcessor('org.projectlombok:lombok:1.18.34')

	// Micronaut inject
	annotationProcessor(platform('io.micronaut:micronaut-bom:3.10.4'))
	implementation('jakarta.inject:jakarta.inject-api:2.0.1')

//	annotationProcessor("io.micronaut:micronaut-inject-java")
	implementation(platform('io.micronaut:micronaut-bom:3.10.4'))
	implementation("io.micronaut:micronaut-inject:4.6.3")

	// transactional annotation
	implementation('io.micronaut.spring:micronaut-spring:5.8.0')

	// MongoDB
//	implementation("io.micronaut.data:micronaut-data-mongodb")
	implementation "io.micronaut.mongodb:micronaut-mongo-reactive:5.4.0"

	// Kafka
	implementation("io.micronaut.kafka:micronaut-kafka:5.7.0")

	// Serializer
	runtimeOnly 'io.micronaut:micronaut-jackson-databind:4.6.3'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'

	// Map difference
	implementation 'com.google.guava:guava:33.3.0-jre'

	// cache
	implementation("io.micronaut.cache:micronaut-cache-core:5.0.1")
	implementation("io.micronaut.cache:micronaut-cache-caffeine:5.0.1")

	// redis
	implementation("io.micronaut.redis:micronaut-redis-lettuce:6.6.0")

	// playfab
	implementation 'com.playfab:client-sdk:0.65.180316'


	// test
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.0'
	testImplementation 'org.assertj:assertj-core:3.26.3'
	testImplementation "io.micronaut.test:micronaut-test-junit5"
	testImplementation 'org.mockito:mockito-core:5.12.0'
	testImplementation 'io.projectreactor:reactor-core:3.6.9'
	testImplementation 'org.awaitility:awaitility:4.2.0'
}

application {
	mainClass.set("server.Application")
}

java {
	sourceCompatibility = JavaVersion.toVersion("23")
	targetCompatibility = JavaVersion.toVersion("23")
}

dockerCompose {
	useComposeFiles = ['./docker-compose.yml']
	stopContainers = false
	// do not wait for debug port
	tcpPortsToIgnoreWhenWaiting = [5005]
}
